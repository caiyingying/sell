<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:annotation-config />
	<context:component-scan base-package="com.daoliuhe.sell">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<bean id="environmentVariablesConfiguration"
		class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
		<!-- 指定加密算法:PBEWithMD5AndDES -->
		<property name="algorithm" value="PBEWithMD5AndDES" />
		<!-- 指定密钥:PTSPASSWORD -->
		<property name="password" value="DAHUATECH" />
	</bean>
	<!-- 指定加密类: StandardPBEStringEncryptor -->
	<bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="environmentVariablesConfiguration" />
	</bean>
	<!-- 指定要已被加密的属性文件 db.properties Jasypt 集成了对 spring 的属性文件解密 -->
	<bean id="propertyConfigurer"
		class="org.jasypt.spring3.properties.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg ref="configurationEncryptor" />
		<property name="locations">
			<list>
				<value>
					classpath:config.properties
				</value>
			</list>
		</property>
	</bean>

<!-- 	<bean id="encryptPropertyPlaceholderConfigurer"
		class="com.dahuatech.dts.util.EncryptPropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
		对配置文件中的指定属性进行解密
		<property name="encryptedProps">
			<set>
				<value>jdbc.password</value>
			</set>
		</property>
	</bean> -->

	<!-- dts 连接池 -->
	<bean id="sellDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minPoolSize" value="${jdbc.miniPoolSize}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!--连接关闭时默认将所有未提交的操作回滚。Default: false -->
		<property name="autoCommitOnClose" value="${jdbc.autoCommitOnClose}"></property>
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
		<property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}" />
		<property name="testConnectionOnCheckin" value="${jdbc.testConnectionOnCheckin}" />
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}" />
		<property name="testConnectionOnCheckout" value="${jdbc.testConnectionOnCheckout}"></property>

	</bean>

	<bean id="sellTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="sellDataSource" />
	</bean>

	<!-- 注解方式事物 -->
	<!-- 
	<tx:annotation-driven transaction-manager="dtsTransactionManager" />
	 -->

	<tx:advice id="sellTxAdvice" transaction-manager="sellTransactionManager">
		<tx:attributes>
			<!-- PROPAGATION_SUPPORTS: 如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行; 
				 PROPAGATION_MANDATORY: 使用当前事务, 如果没有, 则抛出异常; 
				 PROPAGATION_REQUIRED: 新建事务,如果当前有事务, 则挂起; 
				 PROPAGATION_NOT_SUPPORTED:以非事务的方式执行, 如果当前有事务, 则挂起; 
				 PROPAGATION_NEVER:以非事务的方式执行, 如果当前有事务,则抛出异常; +/-Exception</prop> 
				+ 表示异常出现时事物提交 - 表示异常出现时事务回滚 -->
			<tx:method name="find*"   propagation="NOT_SUPPORTED" read-only="true" />
			<tx:method name="query*"  propagation="NOT_SUPPORTED" read-only="true" />
			<tx:method name="save*"   propagation="REQUIRED" read-only="false" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" />
			<tx:method name="create*" propagation="REQUIRED" read-only="false" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" />
			<tx:method name="do*"     propagation="REQUIRED" read-only="false" />
			<tx:method name="*"       propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="serviceMethod"
			expression="execution(* com.daoliuhe.sell.service.impl.*.*(..))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="sellTxAdvice" />
	</aop:config>


	<!-- myibatis 工厂bean -->
	<bean id="sellSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 引入数据原 -->
		<property name="dataSource" ref="sellDataSource" />
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>

	<!-- mybatis自动扫描加载Sql映射文件/接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.daoliuhe.sell.mapper"></property>
		<property name="sqlSessionFactoryBeanName" value="sellSqlSessionFactory"></property>
	</bean>

</beans>